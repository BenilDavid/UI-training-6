{"version":3,"sources":["features/counter/Counter.module.css","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","App","useState","searchValue","setSearchValue","location","setLocation","weather","setWeather","useEffect","params","access_key","query","axios","get","then","res","console","log","catch","error","latitude","longitude","options","method","url","lat","lng","headers","request","store","createStore","type","subscribe","getState","dispatch","className","placeholder","onClick","searchPlace","document","querySelector","src","icon","alt","Math","round","temperature","humidity","windSpeed","label","summary","configureStore","reducer","counter","counterReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fca4f700.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__2LokB\",\"value\":\"Counter_value__CyY_d\",\"button\":\"Counter_button__Ly1i1\",\"textbox\":\"Counter_textbox__2Mp0P\",\"asyncButton\":\"Counter_asyncButton__22leT Counter_button__Ly1i1\"};","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\n// import './App.css';\nimport './css/style.css';\nimport { createStore } from 'redux';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n\tvar API_key =\n\t\t'7b361cdd02714c0848654f475fc61c37999401dadee274ab4e564dba8f104d4c';\n\tvar location_API_key = '05098d664e7c7e941d6a624fc28b5fef';\n\n\tconst [searchValue, setSearchValue] = useState('goa');\n\tconst [location, setLocation] = useState(0);\n\tconst [weather, setWeather] = useState(0);\n\n\t// location API\n\tuseEffect(() => {\n\t\tconst params = {\n\t\t\taccess_key: location_API_key,\n\t\t\tquery: searchValue,\n\t\t};\n\t\taxios\n\t\t\t.get(`http://api.positionstack.com/v1/forward`, { params })\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log(res.data);\n\t\t\t\tsetLocation(res.data);\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}, [searchValue]);\n\n\t// weather API\n\tuseEffect(() => {\n\t\tif (location) {\n\t\t\tconsole.log(location.data[0].latitude);\n\t\t\tconsole.log(location.data[0].longitude);\n\t\t\tconst options = {\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: 'https://api.ambeedata.com/weather/latest/by-lat-lng',\n\t\t\t\tparams: {\n\t\t\t\t\tlat: location.data[0].latitude,\n\t\t\t\t\tlng: location.data[0].longitude,\n\t\t\t\t},\n\t\t\t\theaders: { 'x-api-key': API_key, 'Content-type': 'application/json' },\n\t\t\t};\n\t\t\taxios\n\t\t\t\t.request(options)\n\t\t\t\t.then(function (response) {\n\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\tsetWeather(response.data);\n\t\t\t\t})\n\t\t\t\t.catch(function (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t});\n\t\t}\n\t}, [location]);\n\n\tif (location) {\n\t\tconsole.log(location);\n\t}\n\tconst SearchedPlace = () => {\n\t\tconst searchPlace = document.querySelector('.searchPlace');\n\t\tconsole.log(searchPlace.value);\n\t\tsetSearchValue(searchPlace.value);\n\t};\n\n\t// STORE (GLOBALIZED STATE)\n\n\t// ACTION\n\tconst Increment = () => {\n\t\treturn {\n\t\t\ttype: 'INCREMENT',\n\t\t};\n\t};\n\n\t// REDUCER\n\tconst reducer = (state = 0, action) => {\n\t\tswitch (action.type) {\n\t\t\tcase 'INCREMENT':\n\t\t\t\treturn state + 1;\n\t\t}\n\t\t\n\t};\n\n\tlet store = createStore(reducer);\n\n\t// display in console\n\tstore.subscribe(() => {\n\t\tconsole.log(store.getState());\n\t});\n\n\t// DISPATCH\n\tstore.dispatch(Increment());\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<main>\n\t\t\t\t<h1 className=\"main-heading\">Weather</h1>\n\t\t\t\t<div className=\"search-city\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"searchPlace\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder={searchValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"search-btn\" onClick={SearchedPlace}>\n\t\t\t\t\t\tsearch\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{location && weather ? (\n\t\t\t\t\t<div className=\"forecast-details\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"weather-image\"\n\t\t\t\t\t\t\tsrc={`https://assetambee.s3-us-west-2.amazonaws.com/weatherIcons/PNG/${weather.data.icon}.png`}\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"degree-details\">\n\t\t\t\t\t\t\t<div className=\"celcius\">\n\t\t\t\t\t\t\t\t{Math.round((((weather.data.temperature - 32) * 5) / 9) * 10) /\n\t\t\t\t\t\t\t\t\t10}\n\t\t\t\t\t\t\t\t&#8451;\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"humidity\">Humidity : {weather.data.humidity}</div>\n\t\t\t\t\t\t\t<div className=\"wind\">Wind : {weather.data.windSpeed}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"forecast-city\">\n\t\t\t\t\t\t\t<div className=\"weather-place\">{location.data[0].label}</div>\n\t\t\t\t\t\t\t<div className=\"weather-type\">{weather.data.summary}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}